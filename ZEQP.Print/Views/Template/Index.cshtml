
@{
    ViewData["Title"] = "文档模板";
}
<div class="card" id="mainApp">
    <h5 class="card-header">文档模板</h5>
    <div class="card-body" v-bind:style="{height:tableHeight+'px'}">
        <div class="card">
            <div class="card-body">
                <form class="form-inline">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">打印时间:</span>
                        </div>
                        <input type="date" class="form-control" placeholder="开始时间" v-model="PageQuery.Query.DateBegin">
                        <div class="input-group-addon">
                            <span class="input-group-text">-</span>
                        </div>
                        <input type="date" class="form-control" placeholder="结束时间" v-model="PageQuery.Query.DateEnd">
                    </div>
                    <div class="input-group ml-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">二维码/订单号/卷号:</span>
                        </div>
                        <input type="text" class="form-control" placeholder="二维码/订单号/卷号" v-model="PageQuery.Match">
                    </div>
                    <button type="button" class="btn btn-primary ml-2" v-on:click="getListData">查询</button>
                </form>
            </div>
        </div>
        <table class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <td>二维码</td>
                    <td>产品品名</td>
                    <td>产品代码</td>
                    <td>卷号</td>
                    <td>生产线</td>
                    <td>生产版本</td>
                    <td>类型</td>
                    <td>打印时间</td>
                    <td>订单号</td>
                    <td>备注</td>
                </tr>
            </thead>
            <tbody>
                <tr v-for="item in ListData" v-bind:key="item.Id" v-on:dblclick="ShowPrint(item)">
                    <td>{{item.Code}}</td>
                    <td>{{item | productName}}</td>
                    <td>{{item | productCode}}</td>
                    <td>{{item.RollNo}}</td>
                    <td>{{item.Pro_line}}</td>
                    <td>{{item.CLASS}}</td>
                    <td>{{item | productClass}}</td>
                    <td>{{item.Date | datetime}}</td>
                    <td>{{item.WMS_order}}</td>
                    <td>{{item.Remark}}</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="card-footer text-muted" style="padding: 0 1.25rem;">
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item"><a class="page-link" href="javascript:;" v-on:click="getPage(1)">首页</a></li>
                <li class="page-item"><a class="page-link" href="javascript:;" v-on:click="getPage(PageQuery.Page-1)">上一页</a></li>
                <li class="page-item disabled"><a class="page-link" href="javascript:;">{{PageQuery.Page}}/{{totalPages}}({{Config.TotalRows}})</a></li>
                <li class="page-item"><a class="page-link" href="javascript:;" v-on:click="getPage(PageQuery.Page+1)">下一页</a></li>
                <li class="page-item"><a class="page-link" href="javascript:;" v-on:click="getPage(totalPages)">尾页</a></li>
            </ul>
        </nav>
    </div>
</div>
@section Scripts{
    <script>
        var mainApp = new Vue({
            el: "#mainApp",
            data: {
                Config: { WindowHeight: window.innerHeight, TotalRows: 0 },
                PageQuery: {
                    Size: 10, Page: 1, Order: "Date", Sort: "DESC", Match: "", Query: { DateBegin: moment(new Date()).format("YYYY-MM-DD"), DateEnd: null }
                },
                ListData: []
            },
            mounted: function () {
                this.$nextTick(() => {
                    window.addEventListener('resize', () => {
                        this.Config.WindowHeight = window.innerHeight;
                    });
                });
                this.getListData();
            },
            computed: {
                totalPages: function () {
                    return this.Config.TotalRows % this.PageQuery.Size
                        ? parseInt(this.Config.TotalRows / this.PageQuery.Size) + 1
                        : this.Config.TotalRows / this.PageQuery.Size;
                },
                tableHeight: function () {
                    return this.Config.WindowHeight - 220;
                }
            },
            filters: {
                date: function (value) {
                    return moment(value).format("YYYY-MM-DD");
                },
                datetime: function (value) {
                    return moment(value).format("YYYY-MM-DD HH:mm:ss");
                },
                productName: function (value) {
                    return value.ProductName1 + "-" + value.ProductName2 + "-" + value.ProductName3;
                },
                productCode: function (value) {
                    return value.ProductCode1 + "-" + value.ProductCode2;
                },
                productClass: function (value) {
                    return [value.Classification1, value.Classification2, value.Classification3].join(" ").trim();
                }
            },
            methods: {
                getListData: function () {
                    axios.post("/api/Product/GetRePrintPage", this.PageQuery)
                        .then(function (response) {
                            var result = response.data;
                            this.ListData = result.Data;
                            this.Config.TotalRows = result.Count;
                            this.PageQuery.Page = result.Page;
                        }.bind(this))
                        .catch(function (error) {
                            console.log(error);
                        });
                },
                getTotalPages() {
                    return this.Config.TotalRows % this.PageQuery.Size
                        ? parseInt(this.Config.TotalRows / this.PageQuery.Size) + 1
                        : this.Config.TotalRows / this.PageQuery.Size;
                },
                getPage(index) {
                    var totalPages = this.getTotalPages();
                    this.PageQuery.Page = index;
                    if (index <= 0) this.PageQuery.Page = 1;
                    if (index > totalPages) this.PageQuery.Page = totalPages;
                    this.getListData();
                },
                ShowPrint: function (item) {
                    window.ShowMainModal({ title: "打印", src: "/RePrint/Print/" + item.Id, width: "820px", height: "620px" });
                }
            }
        });
    </script>
}